// Code generated by protoc-gen-go.
// source: nyt/semanticconcept.proto
// DO NOT EDIT!

package nyt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SemanticConceptResponse struct {
	Status     string                   `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Copyright  string                   `protobuf:"bytes,2,opt,name=copyright" json:"copyright,omitempty"`
	NumResults uint32                   `protobuf:"varint,3,opt,name=num_results" json:"num_results,omitempty"`
	Result     []*SemanticConceptResult `protobuf:"bytes,4,rep,name=result" json:"result,omitempty"`
}

func (m *SemanticConceptResponse) Reset()                    { *m = SemanticConceptResponse{} }
func (m *SemanticConceptResponse) String() string            { return proto.CompactTextString(m) }
func (*SemanticConceptResponse) ProtoMessage()               {}
func (*SemanticConceptResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SemanticConceptResponse) GetResult() []*SemanticConceptResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type SemanticConceptResult struct {
	ArticleList *SemanticConceptArticleList `protobuf:"bytes,1,opt,name=article_list" json:"article_list,omitempty"`
}

func (m *SemanticConceptResult) Reset()                    { *m = SemanticConceptResult{} }
func (m *SemanticConceptResult) String() string            { return proto.CompactTextString(m) }
func (*SemanticConceptResult) ProtoMessage()               {}
func (*SemanticConceptResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SemanticConceptResult) GetArticleList() *SemanticConceptArticleList {
	if m != nil {
		return m.ArticleList
	}
	return nil
}

type SemanticConceptArticleList struct {
	Result []*SemanticConceptArticle `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
	Total  uint32                    `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *SemanticConceptArticleList) Reset()                    { *m = SemanticConceptArticleList{} }
func (m *SemanticConceptArticleList) String() string            { return proto.CompactTextString(m) }
func (*SemanticConceptArticleList) ProtoMessage()               {}
func (*SemanticConceptArticleList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *SemanticConceptArticleList) GetResult() []*SemanticConceptArticle {
	if m != nil {
		return m.Result
	}
	return nil
}

type SemanticConceptArticle struct {
	Body   string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Byline string `protobuf:"bytes,2,opt,name=byline" json:"byline,omitempty"`
	Title  string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *SemanticConceptArticle) Reset()                    { *m = SemanticConceptArticle{} }
func (m *SemanticConceptArticle) String() string            { return proto.CompactTextString(m) }
func (*SemanticConceptArticle) ProtoMessage()               {}
func (*SemanticConceptArticle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*SemanticConceptResponse)(nil), "nyt.SemanticConceptResponse")
	proto.RegisterType((*SemanticConceptResult)(nil), "nyt.SemanticConceptResult")
	proto.RegisterType((*SemanticConceptArticleList)(nil), "nyt.SemanticConceptArticleList")
	proto.RegisterType((*SemanticConceptArticle)(nil), "nyt.SemanticConceptArticle")
}

var fileDescriptor1 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0xa9, 0x81, 0x4c, 0x1a, 0xc1, 0x15, 0x35, 0xd6, 0x83, 0x25, 0xa7, 0xa2, 0x10,
	0xa1, 0xe2, 0x0f, 0x10, 0xaf, 0xe2, 0xa1, 0x5e, 0xbc, 0x95, 0x24, 0x2e, 0xba, 0xb0, 0xdd, 0x0d,
	0x3b, 0x93, 0xc3, 0x1e, 0xfc, 0xef, 0x8e, 0x9b, 0xe0, 0xc5, 0xa6, 0xc7, 0xbc, 0xf7, 0x78, 0xf3,
	0xf2, 0x2d, 0x5c, 0x19, 0x4f, 0xf7, 0x28, 0x77, 0xb5, 0x21, 0xd5, 0xb6, 0xd6, 0xb4, 0xb2, 0xa3,
	0xaa, 0x73, 0x96, 0xac, 0x88, 0xd9, 0x2a, 0xbf, 0xe1, 0xf2, 0x6d, 0x74, 0x9f, 0x07, 0x77, 0x23,
	0xb1, 0xb3, 0x06, 0xa5, 0x38, 0x81, 0x04, 0xa9, 0xa6, 0x1e, 0x8b, 0x68, 0x19, 0xad, 0x52, 0x71,
	0x0a, 0x69, 0x6b, 0x3b, 0xef, 0xd4, 0xe7, 0x17, 0x15, 0x47, 0x41, 0x3a, 0x83, 0xcc, 0xf4, 0xbb,
	0xad, 0x93, 0xd8, 0x6b, 0xc2, 0x22, 0x66, 0x31, 0x17, 0xb7, 0x90, 0x0c, 0x42, 0x31, 0x5b, 0xc6,
	0xab, 0x6c, 0xbd, 0xa8, 0xf8, 0x50, 0xf5, 0xff, 0x0a, 0x27, 0xca, 0x57, 0x38, 0xdf, 0x6b, 0x88,
	0x47, 0x98, 0xd7, 0x8e, 0x55, 0x2d, 0xb7, 0x5a, 0x21, 0x85, 0x09, 0xd9, 0xfa, 0x66, 0x5f, 0xd5,
	0xd3, 0x90, 0x7b, 0xe1, 0x58, 0xf9, 0x0e, 0x8b, 0x69, 0x57, 0xdc, 0xfd, 0x2d, 0x8b, 0xc2, 0xb2,
	0xeb, 0x03, 0x75, 0x22, 0x87, 0x63, 0xb2, 0x54, 0xeb, 0xf0, 0xab, 0x79, 0xb9, 0x81, 0x8b, 0x89,
	0xe0, 0x1c, 0x66, 0x8d, 0xfd, 0xf0, 0x23, 0x25, 0xa6, 0xd6, 0x78, 0xad, 0x8c, 0x1c, 0x11, 0xfd,
	0xd6, 0x28, 0xd2, 0x32, 0xc0, 0x49, 0x45, 0x06, 0x71, 0xef, 0x34, 0x93, 0xe1, 0x8f, 0x26, 0x09,
	0x0f, 0xf1, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xc9, 0xcd, 0xd3, 0xa5, 0x01, 0x00, 0x00,
}

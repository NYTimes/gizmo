package server

import (
	"fmt"
	"strings"

	uuid "github.com/nu7hatch/gouuid"
)

// IDer generates a new ID
type IDer interface {
	ID() (string, error)
}

// AppUUID generates IDs based on v4 UUIDs
type AppUUID struct {
	formatter func(string) string
}

// NewAppUUID creates a new AppUUID generator
func NewAppUUID(appname string) *AppUUID {
	uuider := &AppUUID{
		formatter: func(u string) string {
			// default formatter does no formatting at all, simply
			// returning the generated UUID as a string
			return u
		},
	}

	if len(appname) > 0 {
		// ...if an appname is supplied, use that instead of the default
		format := appname + "-%s"
		uuider.formatter = func(u string) string {
			return fmt.Sprintf(format, u)
		}
	}

	return uuider
}

// ID returns a random (v4) UUID using the prefix supplied to NewAppUUID()
func (i *AppUUID) ID() (string, error) {
	u, err := uuid.NewV4()
	if err != nil {
		return "", err
	}

	return i.formatter(u.String()), nil
}

// A PipelineID identifies requests all the way through some system by concatenating the
// IDs generated by each individual app, each separated by a separator string, "|"
type PipelineID struct {
	AppIDer IDer
}

const fullIDerSep = "|"

// ID generates a new pipeline ID based on the current ID and its app IDer
func (f *PipelineID) ID(current string) (string, error) {
	next, err := f.AppIDer.ID()
	if err != nil {
		return "", err
	}

	if len(current) == 0 {
		return next, nil
	}

	return strings.Join([]string{current, next}, fullIDerSep), nil
}
